name: Auto Release on main Merge

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Grants write access to repository content

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Current Version Tag
        id: get_version
        run: |
          # Get the latest tag from the remote
          latest_tag=$(git ls-remote --tags origin | grep -Eo "refs/tags/v[0-9]+\\.[0-9]+\\.[0-9]+" | sort -V | tail -n1 | sed 's|refs/tags/||')

          # Default to v0.0.0 if no tags exist
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi

          echo "Latest tag: $latest_tag"

          # Extract major, minor, and patch versions
          major=$(echo "$latest_tag" | cut -d. -f1 | cut -dv -f2)
          minor=$(echo "$latest_tag" | cut -d. -f2)
          patch=$(echo "$latest_tag" | cut -d. -f3)

          # Increment patch version
          patch=$((patch + 1))

          # Form the new tag
          new_tag="v${major}.${minor}.${patch}"
          echo "New tag: $new_tag"

          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Push New Tag
        run: |
          git tag "$new_tag"
          git push origin "$new_tag"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$new_tag" \
            --title "$new_tag" \
            --notes "Automated release for changes merged into main."
